链表的问题，我觉得没有思想难度，纯粹是实现难度。烦死了。

- [2][Medium]两数相加
这道题我反复改了几次才通过测试
以下几项要格外注意：
    1. l1或l2为空时，carry依然可能有值
    2. l1和l2都为空时，carry依然可能有值

- [19][Medium]删除链表倒数第N个节点
快慢指针，一个指针先行

- [21][Easy]合并两个有序链表
归并

-[22][Hard]合并k个有序链表
两两归并

-[24][Medium]两两交换链表中的节点
while ptr.next and ptr.next.next:
    pass

-[25][Hard]k个一组翻转链表
用递归简单一点

-[61][Medium]旋转链表
取模，重新构造

-[82][Easy]删除排序链表中的重复元素ii
easy

-[83][Medium]删除排序链表中的重复元素
easy

-[86][Medium]分割链表
分为两个链表再拼接即可

-[92][Medium]反转链表ii

-[109][Medium]有序链表转换二叉搜索树
用分治是基本解法，但是用中序遍历+分治才是完全正确的解法
这个题属于二叉树
https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/solution/you-xu-lian-biao-zhuan-huan-er-cha-sou-suo-shu-1-3/

-[138][Medium]复制带随机指针的链表
回溯，map,其实和spring的bean初始化


-[141][Easy]环形链表
快慢指针
2(a+b) = a + b + n(b+c) n>=1
a = n(b+c) - b
也即从头开始走，与从b开始转圈，经过a步后会相遇。

-[142]环形链表ii
快慢指针

-[143]重排链表
我能想到的：列表保存，然后两头遍历
答案：快慢指针把列表拆分为两段，反转后端，然后合并两段。

-[147]对链表进行插入排序
链表插入排序，再适合不过

-148[Medium]排序链表
插入排序是N*N
归并排序是Nlg(N)
    - 自顶向下
    - 自下向上(挺难的)

-160[Easy]相交链表
    - HashMap记忆做法
    - 非常经典的双指针法

-203[Easy]移除链表元素
简单

-206[Easy]反转链表
简单

-234[Easy]回文链表
    - 暴力：用列表。
    - 找到中点，反转一部分。然后对比两段是否相同。缺点，改变了原链表。

-237[Easy]删除链表中的节点
node.val = node.next.val
node.next = node.next.next

-328[Medium]奇偶链表
拆分为两个链表，然后合并。







